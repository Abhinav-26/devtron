apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  creationTimestamp: null
  generation: 1
  labels:
    app: grafana
    chart: grafana-2.0.2
    heritage: Tiller
    release: monitoring
  name: monitoring-grafana
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
      release: monitoring
  serviceName: ""
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
        release: monitoring
    spec:
      containers:
      - env:
        - name: LABEL
          value: grafana_dashboard
        - name: FOLDER
          value: /tmp/dashboards
        image: kiwigrid/k8s-sidecar:0.0.16
        imagePullPolicy: IfNotPresent
        name: grafana-sc-dashboard
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp/dashboards
          name: sc-dashboard-volume
      - env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: devtron-grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: devtron-grafana
        - name: GF_INSTALL_PLUGINS
          valueFrom:
            configMapKeyRef:
              key: plugins
              name: devtron-grafana
        image: grafana/grafana:5.4.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 80
          name: service
          protocol: TCP
        - containerPort: 3000
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /etc/grafana/ldap.toml
          name: ldap
          subPath: ldap.toml
        - mountPath: /var/lib/grafana/
          name: grafana-vol
        - mountPath: /tmp/dashboards
          name: sc-dashboard-volume
        - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
          name: sc-dashboard-provider
          subPath: provider.yaml
        - mountPath: /etc/grafana/provisioning/datasources
          name: sc-datasources-volume
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - chown
        - -R
        - 472:472
        - /var/lib/grafana
        image: busybox:1.30.0
        imagePullPolicy: IfNotPresent
        name: init-chown-data
        resources: {}
        securityContext:
          procMount: Default
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-vol
      - env:
        - name: METHOD
          value: LIST
        - name: LABEL
          value: grafana_datasource
        - name: FOLDER
          value: /etc/grafana/provisioning/datasources
        image: kiwigrid/k8s-sidecar:0.0.16
        imagePullPolicy: IfNotPresent
        name: grafana-sc-datasources
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/provisioning/datasources
          name: sc-datasources-volume
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsUser: 472
      serviceAccount: devtron-grafana
      serviceAccountName: devtron-grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: devtron-grafana
        name: config
      - name: ldap
        secret:
          defaultMode: 420
          items:
          - key: ldap-toml
            path: ldap.toml
          secretName: devtron-grafana
      - emptyDir: {}
        name: sc-dashboard-volume
      - configMap:
          defaultMode: 420
          name: devtron-grafana-config-dashboards
        name: sc-dashboard-provider
      - emptyDir: {}
        name: sc-datasources-volume
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      name: grafana-vol
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
      storageClassName: gp2
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  replicas: 0

---

apiVersion: v1
kind: Secret
metadata:
  name: devtron-grafana-cred-secret
type: Opaque
data:
  admin-user: YWRtaW4=
  ldap-toml: ""
---
# Source: grafana/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    # Default set from Docker, without DAC_OVERRIDE or CHOWN
    - FOWNER
    - FSETID
    - KILL
    - SETGID
    - SETUID
    - SETPCAP
    - NET_BIND_SERVICE
    - NET_RAW
    - SYS_CHROOT
    - MKNOD
    - AUDIT_WRITE
    - SETFCAP
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'csi'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
---
# Source: grafana/templates/tests/test-podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: devtron-grafana-test
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  allowPrivilegeEscalation: true
  privileged: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - projected
  - csi
  - secret
---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  name: devtron-grafana
  namespace: devtroncd
---
# Source: grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  name: devtron-grafana-test
  namespace: devtroncd
---
# Source: grafana/templates/configmap-dashboard-provider.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  name: devtron-grafana-config-dashboards
  namespace: devtroncd
data:
  provider.yaml: |-
    apiVersion: 1
    providers:
    - name: 'sidecarProvider'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      allowUiUpdates: false
      options:
        foldersFromFilesStructure: false
        path: /tmp/dashboards
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    root_url = ""
    serve_from_sub_path = true
  plugins: grafana-kubernetes-app
  dashboardproviders.yaml: |
    apiVersion: 1
    providers: []
  download_dashboards.sh: |
    #!/usr/bin/env sh
    set -euf
    mkdir -p /var/lib/grafana/dashboards/devtron-provider
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13322/revisions/2/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/cpu-usage.json"
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13320/revisions/2/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/latency-status.json"
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13325/revisions/3/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/memory-usage.json"
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13321/revisions/2/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/response-status.json"
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13323/revisions/6/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/memory-usage-below-k8s1-15.json"
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      "https://grafana.com/api/dashboards/13324/revisions/3/download" | sed '/-- .* --/! s/"datasource":.*,/"datasource": "Prometheus",/g'\
    > "/var/lib/grafana/dashboards/devtron-provider/cpu-usage-below-k8s1-15.json"
---
# Source: grafana/templates/dashboards-json-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-grafana-dashboards-devtron-provider
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
    dashboard-provider: devtron-provider
data:
  {}
---
# Source: grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-grafana-test
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    @test "Test Health" {
      url="http://devtron-grafana/api/health"

      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: grafana/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  finalizers:
    - kubernetes.io/pvc-protection
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "20Gi"
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  name: devtron-grafana-clusterrole
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps", "secrets"]
  verbs: ["get", "watch", "list"]
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: devtron-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: devtron-grafana
    namespace: devtroncd
roleRef:
  kind: ClusterRole
  name: devtron-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [devtron-grafana]
---
# Source: grafana/templates/tests/test-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: devtron-grafana-test
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:      ['policy']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [devtron-grafana-test]
---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devtron-grafana
subjects:
- kind: ServiceAccount
  name: devtron-grafana
  namespace: devtroncd
---
# Source: grafana/templates/tests/test-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devtron-grafana-test
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: devtron-grafana-test
subjects:
- kind: ServiceAccount
  name: devtron-grafana-test
  namespace: devtroncd
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000

  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
---

# Source: grafana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: devtron-grafana
  namespace: devtroncd
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host:
      http:
        paths:
          - path: /grafana(/|$)(.*)
            backend:
              serviceName: devtron-grafana
              servicePort: 80
---
# Source: grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: devtron-grafana-test
  labels:
    helm.sh/chart: grafana-6.1.0
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: devtron
    app.kubernetes.io/version: "7.3.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
  namespace: devtroncd
spec:
  serviceAccountName: devtron-grafana-test
  containers:
    - name: devtron-test
      image: "quay.io/devtron/bats:v1.1.0"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
  - name: tests
    configMap:
      name: devtron-grafana-test
  restartPolicy: Never